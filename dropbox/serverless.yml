service:
  name: dropbox-integration

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack # compiles and bundles together typescript code
  - serverless-finch   # deploys static web pages to S3

provider:
  name: aws
  runtime: nodejs6.10
  state: dev
  region: eu-west-2
  profile: test
  environment:
    DROPBOX_CLIENT_ID: ${env:DROPBOX_CLIENT_ID}
    DROPBOX_CLIENT_SECRET: ${env:DROPBOX_CLIENT_SECRET}

functions:
  webhook-challenge:
    handler: src/main/handler.webhookChallenge
    events:
      - http:
          method: get
          path: dropbox-webhook

          request:
            parameters:
              querystrings:
                challenge: true

  webhook-notify:
    handler: src/main/handler.webhookNotify
    events:
      - http:
          method: post
          path: dropbox-webhook
          integration: lambda-proxy

  oauth-initiate:
    handler: src/main/handler.oauthInitiate
    events:
      - http:
          method: get
          path: dropbox-oauth-initiate

  oauth-complete:
    handler: src/main/handler.oauthComplete
    events:
      - http:
          method: get
          path: dropbox-oauth-complete

          request:
            parameters:
              querystrings:
                code: true

  user-report:
    handler: src/main/handler.userReport
    events:
      - http:
          method: get
          path: dropbox-user-report

          request:
            parameters:
              querystrings:
                account_id: true

resources:
  Resources:
    UserTokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: user_tokens
        AttributeDefinitions:
          - AttributeName: account_id
            AttributeType: S
        KeySchema:
          - AttributeName: account_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    UserCursorsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: user_cursors
        AttributeDefinitions:
          - AttributeName: account_id
            AttributeType: S
        KeySchema:
          - AttributeName: account_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    FileChangesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: file_changes
        AttributeDefinitions:
          - AttributeName: account_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: account_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10

    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn:
        - UserTokensTable
        - UserCursorsTable
        - FileChangesTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:BatchWriteItem
              Resource:
                - arn:aws:dynamodb:*:*:table/user_tokens
                - arn:aws:dynamodb:*:*:table/user_cursors
                - arn:aws:dynamodb:*:*:table/file_changes
        Roles:
          - Ref: IamRoleLambdaExecution

custom:
    client:
        bucketName: icarus-dropbox-site
